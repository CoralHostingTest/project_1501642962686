{
    "swagger": "2.0",
    "info": {
        "title": "The apex API",
        "version": "1",
        "description": "**APEX API** provides endpoints to onboard, update, delete a project and retrieve project(s) information. It also provides other operations to sync with github or receive github events. \u003cbr/\u003e \u003cbr/\u003e ***Terminologies*** \u003cbr/\u003e * **Project**: A project is an API that is registered with APEX through the onboarding process. \u003cbr/\u003e"
    },
    "host": "ccc-api1.cards.ec.tw1.yahoo.com:4443",
    "basePath": "/api/apex/v1",
    "schemes": [
        "https"
    ],
    "paths": {
        "/projects": {
            "get": {
                "tags": [
                    "ProjectResponseList"
                ],
                "summary": "Get all projects. \u003cbr/\u003e Please refer to [Sample Request/Responses](#TBD) sections for examples.",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ProjectResponseList"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    }
                }
            }
        },
        "/projects/": {
            "post": {
                "tags": [
                    "ProjectResponse"
                ],
                "summary": "Create/Onboard a project. \u003cbr/\u003e Please refer to  [Sample Request/Responses](#TBD) sections for examples.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "creationRequest",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ProjectRequest"
                        },
                        "description": "Required request parameter.",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/ProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    }
                }
            }
        },
        "/projects/{id}": {
            "delete": {
                "tags": [
                    "NullResponse"
                ],
                "summary": "Delete the project with the given project id. \u003cbr/\u003e Please refer to [Sample Request/Responses](#TBD) sections for examples.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "format": "uuid",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "ProjectResponse"
                ],
                "summary": "Get the detail of the project with the given project id. \u003cbr/\u003e Please refer to [Sample Request/Responses](#TBD) sections for examples.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "format": "uuid",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "ProjectResponse"
                ],
                "summary": "Edit/Modify a project. \u003cbr/\u003e Please refer to  [Sample Request/Responses](#TBD) sections for examples.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "format": "uuid",
                        "required": true
                    },
                    {
                        "name": "project",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ProjectRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    }
                }
            }
        },
        "/projects/{id}/events": {
            "post": {
                "tags": [
                    "NullResponse"
                ],
                "summary": "For github Webhook callback \u003cbr/\u003e",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "format": "uuid",
                        "required": true
                    },
                    {
                        "name": "event",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/PushEventRequest"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    }
                }
            }
        },
        "/projects/{id}/sync": {
            "post": {
                "tags": [
                    "NullResponse"
                ],
                "summary": "Force Apex to sync with the project data on git. \u003cbr/\u003e Please refer to [Sample Request/Responses](#TBD) sections for examples.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "format": "uuid",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ResourceError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "NullResponse": {
            "description": "Represents response when there is no content."
        },
        "ParsecErrorBody": {
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "detail": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ParsecErrorDetail"
                    }
                },
                "message": {
                    "type": "string"
                }
            },
            "required": [
                "message"
            ]
        },
        "ParsecErrorDetail": {
            "properties": {
                "invalidValue": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            },
            "required": [
                "message"
            ]
        },
        "ParsecResourceError": {
            "properties": {
                "error": {
                    "$ref": "#/definitions/ParsecErrorBody"
                }
            },
            "required": [
                "error"
            ]
        },
        "ProjectRequest": {
            "properties": {
                "custodian": {
                    "type": "string",
                    "description": "The custodian/contact of the api, should be a `@yahoo-inc` address. An ilist is preferred.",
                    "example": ""
                },
                "description": {
                    "type": "string",
                    "description": "Long description of the api.",
                    "example": ""
                },
                "name": {
                    "type": "string",
                    "description": "The name of the api.",
                    "example": ""
                },
                "repoUrl": {
                    "type": "string",
                    "description": "The ssh url to the repository where the RDL source and documents resides. \u003cbr/\u003e Should be in the format of `git@git.corp.yahoo.com:${orgname}/${reponame}.git#${branchName}`",
                    "example": ""
                }
            },
            "required": [
                "repoUrl",
                "name",
                "custodian",
                "description"
            ],
            "description": "The request parameter used in project onboarding/creation and update. \u003cbr/\u003e\u003cbr/\u003e - Each and every field are required for creation (not null), and can not be blank. \u003cbr/\u003e - The fields are allowed to be null on update but not blank. If the field value is null for update, the field will be kept unchanged. \u003cbr/\u003e - Please refer to  [Sample Request/Responses](#TBD) sections for examples. \u003cbr/\u003e - **Implementation note**: Regex is used to verify the input is not blank and escape '\\\\' twice for rdl \u0026 java"
        },
        "ProjectResponse": {
            "properties": {
                "createdTime": {
                    "type": "string",
                    "description": "The date time when the project is created.",
                    "example": ""
                },
                "custodian": {
                    "type": "string",
                    "description": "The custodian of the project. As specified on project creation.",
                    "example": ""
                },
                "description": {
                    "type": "string",
                    "description": "The description of the project. As specified on project creation.",
                    "example": ""
                },
                "docUrl": {
                    "type": "string",
                    "description": "The url to the document-hosting page, ex: https://git.corp.yahoo.com/pages/ApexHosting/project_cat/",
                    "example": ""
                },
                "id": {
                    "type": "_UUID_",
                    "description": "System generated unique id.",
                    "example": ""
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project. As specified on project creation.",
                    "example": ""
                },
                "repoBranch": {
                    "type": "string",
                    "description": "The branch of the project repository, specified in `repoUrl` on project creation.",
                    "example": ""
                },
                "repoHeadSha": {
                    "type": "string",
                    "description": "The sha of the project repository.",
                    "example": ""
                },
                "repoName": {
                    "type": "string",
                    "description": "The name of the project repository, specified in `repoUrl` on project creation.",
                    "example": ""
                },
                "repoOrg": {
                    "type": "string",
                    "description": "The organization of the project repository, specified in `repoUrl` on project creation.",
                    "example": ""
                },
                "repoUrl": {
                    "type": "string",
                    "description": "The repository of the project. As specified on project creation.",
                    "example": ""
                },
                "reviewUrl": {
                    "type": "string",
                    "description": "The url to the api review jive page, ex: https://yahoo.jiveon.com/thread/17141, as specified in the project config file.",
                    "example": ""
                },
                "splunkDashboardUrl": {
                    "type": "string",
                    "description": "The url to the api splunk dashboard, as specified in the project config file.",
                    "example": ""
                },
                "testHostUrl": {
                    "type": "string",
                    "description": "The test host url, as specified in the project config file.",
                    "example": ""
                },
                "updateTime": {
                    "type": "string",
                    "description": "The date time when the project is updated.",
                    "example": ""
                },
                "webHookId": {
                    "type": "integer",
                    "format": "int64",
                    "example": 0
                }
            },
            "required": [
                "id",
                "name",
                "custodian",
                "description",
                "repoUrl",
                "repoOrg",
                "repoName",
                "repoBranch",
                "repoHeadSha",
                "docUrl",
                "reviewUrl",
                "splunkDashboardUrl",
                "testHostUrl",
                "webHookId",
                "createdTime",
                "updateTime"
            ],
            "description": "The response object used in GET operation"
        },
        "ProjectResponseList": {
            "properties": {
                "projectResponseList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProjectResponse"
                    }
                }
            },
            "required": [
                "projectResponseList"
            ],
            "description": "A collection of [ProjectResponse](#projectresponse)"
        },
        "PushEventRequest": {
            "properties": {
                "after": {
                    "type": "string",
                    "description": "the latest SHA",
                    "example": ""
                },
                "ref": {
                    "type": "string",
                    "example": ""
                }
            },
            "required": [
                "ref",
                "after"
            ],
            "description": "Represents the github webhook payload. Currently we only need these 2 fields. \u003cbr/\u003e ref: https://developer.github.com/v3/activity/events/types/#pushevent"
        },
        "ResourceError": {
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                }
            },
            "required": [
                "code",
                "message"
            ]
        }
    }
}
